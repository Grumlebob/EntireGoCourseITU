// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: DistributedHashtable/DistributedHashtable.proto

package go_DistributedHashtable

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashtableClient is the client API for Hashtable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashtableClient interface {
	Put(ctx context.Context, opts ...grpc.CallOption) (Hashtable_PutClient, error)
	Get(ctx context.Context, in *GetMsg, opts ...grpc.CallOption) (*GetRsp, error)
}

type hashtableClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtableClient(cc grpc.ClientConnInterface) HashtableClient {
	return &hashtableClient{cc}
}

func (c *hashtableClient) Put(ctx context.Context, opts ...grpc.CallOption) (Hashtable_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hashtable_ServiceDesc.Streams[0], "/DistributedHashtable.Hashtable/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashtablePutClient{stream}
	return x, nil
}

type Hashtable_PutClient interface {
	Send(*PutMsg) error
	Recv() (*PutRsp, error)
	grpc.ClientStream
}

type hashtablePutClient struct {
	grpc.ClientStream
}

func (x *hashtablePutClient) Send(m *PutMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hashtablePutClient) Recv() (*PutRsp, error) {
	m := new(PutRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hashtableClient) Get(ctx context.Context, in *GetMsg, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/DistributedHashtable.Hashtable/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtableServer is the server API for Hashtable service.
// All implementations must embed UnimplementedHashtableServer
// for forward compatibility
type HashtableServer interface {
	Put(Hashtable_PutServer) error
	Get(context.Context, *GetMsg) (*GetRsp, error)
	mustEmbedUnimplementedHashtableServer()
}

// UnimplementedHashtableServer must be embedded to have forward compatible implementations.
type UnimplementedHashtableServer struct {
}

func (UnimplementedHashtableServer) Put(Hashtable_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedHashtableServer) Get(context.Context, *GetMsg) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHashtableServer) mustEmbedUnimplementedHashtableServer() {}

// UnsafeHashtableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtableServer will
// result in compilation errors.
type UnsafeHashtableServer interface {
	mustEmbedUnimplementedHashtableServer()
}

func RegisterHashtableServer(s grpc.ServiceRegistrar, srv HashtableServer) {
	s.RegisterService(&Hashtable_ServiceDesc, srv)
}

func _Hashtable_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HashtableServer).Put(&hashtablePutServer{stream})
}

type Hashtable_PutServer interface {
	Send(*PutRsp) error
	Recv() (*PutMsg, error)
	grpc.ServerStream
}

type hashtablePutServer struct {
	grpc.ServerStream
}

func (x *hashtablePutServer) Send(m *PutRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hashtablePutServer) Recv() (*PutMsg, error) {
	m := new(PutMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hashtable_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtableServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributedHashtable.Hashtable/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtableServer).Get(ctx, req.(*GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Hashtable_ServiceDesc is the grpc.ServiceDesc for Hashtable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hashtable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributedHashtable.Hashtable",
	HandlerType: (*HashtableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Hashtable_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Hashtable_Put_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "DistributedHashtable/DistributedHashtable.proto",
}
